% Encoding: UTF-8
@book{Knuth1998,
 author = {Knuth, Donald E.},
 title = {The art of computer programming,  volume 3: (2nd ed.) sorting and searching},
 year = {1998},
 publisher = {Addison Wesley Longman Publishing Co., Inc.},
 address = {Redwood City, CA, USA}
}

@book{Pollefliet2011,
  author = {Pollefliet, Leen},
  title = {Schrijven van verslag tot eindwerk: do's en don'ts},
  year = {2011},
  publisher = {Academia Press},
  address = {Gent}
}

@article{Creeger2009,
  author = {Creeger, Mache},
  journal = {Communications of the ACM},
  number = {8},
  pages = {50--56},
  title = {{CTO Roundtable: Cloud Computing}},
  volume = {52},
  year = {2009}
}

@Electronic{Oracle,
  author       = {Oracle},
  editor       = {Oracle},
  title        = {Moved by Java Timeline},
  url          = {https://www.oracle.com/java/moved-by-java/timeline/},
  urldate      = {2021-02-11},
  journaltitle = {Oracle},
  publisher    = {Oracle},
}

@Electronic{Jemerov2011,
  author       = {Dmitry Jemerov},
  date         = {2011-07-19},
  editor       = {Dmitry Jemerov},
  title        = {Hello World},
  url          = {https://blog.jetbrains.com/kotlin/2011/07/hello-world-2/},
  urldate      = {2021-02-11},
  journaltitle = {JetBrains Blog},
}

@Electronic{GitHub2018,
  author  = {GitHub},
  date    = {2018},
  editor  = {GitHub},
  title   = {The State of the Octoverse},
  url     = {https://octoverse.github.com/2018},
  urldate = {2021-02-11},
}

@Electronic{Shafirov2017,
  author  = {Maxim Shafirov},
  date    = {2017-05-17},
  editor  = {Maxim Shafirov},
  title   = {Kotlin on Android. Now official},
  url     = {https://blog.jetbrains.com/kotlin/2017/05/kotlin-on-android-now-official/},
  urldate = {2021-02-11},
}

@Electronic{Belov2018,
  author  = {Roman Belov},
  date    = {2018-10-29},
  editor  = {Roman Belov},
  title   = {Kotlin 1.3 Released with Coroutines, Kotlin/Native Beta, and more},
  url     = {https://blog.jetbrains.com/kotlin/2018/10/kotlin-1-3/},
  urldate = {2021-02-11},
}

@Electronic{Petrova2020,
  author  = {Ekaterina Petrova},
  date    = {2020-08-31},
  editor  = {Ekaterina Petrova},
  title   = {Kotlin Multiplatform Mobile Goes Alpha},
  url     = {https://blog.jetbrains.com/kotlin/2020/08/kotlin-multiplatform-mobile-goes-alpha/},
  urldate = {2021-02-11},
}

@Electronic{Jemerov2017,
  author  = {Dmitry Jemerov},
  date    = {2017-11-28},
  editor  = {Dmitry Jemerov},
  title   = {Kotlin 1.2 Released: Sharing Code between Platforms},
  url     = {https://blog.jetbrains.com/kotlin/2017/11/kotlin-1-2-released/},
  urldate = {2021-02-11},
}

@MastersThesis{Evert2019,
  author      = {Evert, Anna-Karin},
  date        = {2019},
  institution = {KTH, School of Electrical Engineering and Computer Science (EECS)},
  title       = {Cross-Platform Smartphone Application Development with Kotlin Multiplatform : Possible Impacts on Development Productivity, Application Size and Startup Time},
  pages       = {40},
  url         = {https://www.diva-portal.org/smash/get/diva2:1368323/FULLTEXT01.pdf},
  abstract    = {The objective of this master’s thesis has been to evaluate the Kotlin Multiplatform feature for developing cross-platform mobile applications for Android and iOS. This has been done in comparison to natively developed applications for the two platforms. The method of evaluation has been to develop a sample application natively for Android and iOS, respectively. The same sample application has then been developed using the Kotlin Multiplatform feature. Finally, the multiplatform Android application has been compared to the natively developed Android application, and the multiplatform iOS application has been compared to the natively developed iOS application. The evaluation has focused on measuring the startup time of the applications, as well as the application size of the installed sample applications, comparing the native ones to the multiplatform ones. An attempt has also been made to try to determine if there can be any productivity gains in using the Kotlin Multiplatform feature instead of doing the development natively for each of the studied platforms. For productivity, the evaluation has included measuring number of lines of code, and build time (compilation time) for the applications. The results indicate that it is possible to write less code if making use of the Kotlin Multiplatform feature. However, the results also indicate an increased build time with Kotlin Multiplatform, for both Android and iOS, and an increased startup time for Android. No indication of an increased startup time for the multiplatform iOS application could be found. As for the application sizes, the results show an increased size for the multiplatform applications.},
}

@Electronic{JetBrains2020,
  author  = {JetBrains},
  date    = {2020-11-23},
  editor  = {JetBrains},
  title   = {KMM plugin releases},
  url     = {https://kotlinlang.org/docs/mobile/kmm-plugin-releases.html#update-to-the-new-release},
  urldate = {2021-02-11},
}

@Electronic{KotlinKMMCaseStudies,
  author  = {Kotlin},
  date    = {2020},
  editor  = {Kotlin},
  title   = {Case Studies},
  url     = {https://kotlinlang.org/lp/mobile/case-studies/},
  urldate = {2021-02-11},
}

@Article{Bishop2006,
  author       = {J. {Bishop} and N. {Horspool}},
  date         = {2006-10},
  journaltitle = {Computer},
  title        = {Cross-Platform Development: Software that Lasts},
  doi          = {10.1109/MC.2006.337},
  issn         = {1558-0814},
  number       = {10},
  pages        = {26-35},
  url          = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.463.6&rep=rep1&type=pdf},
  volume       = {39},
  abstract     = {The design of software that is easy to port or deliberately targeted for multiple platforms is a neglected area of software engineering. A promising solution is to link components and toolkits through XML and reflection. One of the more compelling definitions of software engineering is, the multiperson construction of multiversion software. The popular view of software engineering focuses on the first part of this definition - managing teams to produce a large product. But just as important is the view inherent in the second part of the definition - identifying specific parts of a product so that experts can design them and organizations can mass-produce them free of language and environment dependencies. Component-based software engineering has made tremendous strides toward satisfying both parts of the definition. Through the use of middleware constructed using reflection and controlled through XML specifications, it is possible to give the components in a large software system a high degree of platform and even language independence. The result is long lived software that can migrate gracefully as platforms improve and change},
  keywords     = {formal specification;middleware;object-oriented programming;software maintenance;software portability;software tools;XML;cross-platform software development;software portability;software toolkits;XML specifications;software reflection;component-based software engineering;middleware;software migration;software change management;Operating systems;Software libraries;Software performance;Hardware;Java;Application software;Graphical user interfaces;Costs;Middleware;Reflection;software engineering;cross-platform development},
}

@Electronic{rspacex2020,
  author  = {r-spacex},
  date    = {2020-12-27},
  title   = {r/SpaceX API V4 Docs},
  url     = {https://github.com/r-spacex/SpaceX-API/tree/master/docs/v4},
  urldate = {2021-02-11},
}

@Conference{Oliveira2020,
  author    = {V. Oliveira and L. Teixeira and F. Ebert},
  booktitle = {2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  date      = {2020-02-18},
  title     = {On the Adoption of Kotlin on Android Development: A Triangulation Study},
  doi       = {10.1109/SANER48275.2020.9054859},
  location  = {London, ON, Canada},
  pages     = {206--216},
  url       = {http://www.victorlaerte.com/doc/On_the_Adoption_of_Kotlin_on_Android_Development__a_Triangulation_Study.pdf},
  year      = {2020},
}

@MastersThesis{Pinto2018,
  author      = {Pinto, Carlos Manuel Manso},
  date        = {2018-12-03},
  institution = {University Institute of Lisbon},
  title       = {From native to cross-platform hybrid development : CodeGT, design and development of a mobile app for ERP},
  url         = {http://hdl.handle.net/10071/17584},
  abstract    = {The current trend towards mobility of individuals, together with the exponential growth of the number of mobile devices led the market to a boom in the demand for the development of mobile applications. Moreover, with the expansion and heterogeneity of the mobile devices and platforms, software companies need to search for faster and cheaper ways to develop applications that can span as many devices as possible to capture the market. Currently, the Android and iOS Operating Systems roughly share and dominate the mobile market, with timid expressions of other competitors. Each of these mobile operating systems were developed using their own languages, strategy and SDKs for development of applications using their libraries – known as Native apps. On the other hand, the evolution of HTML5, CSS and JavaScript created generic alternatives to create mobile apps that run on devices on all operating systems, although lacking the capability to access the device’s full potential. Alongside came the new Hybrid cross-platform development frameworks, which try to take the best of both worlds. This dissertation describes the evolution of the different mobile app development approaches and the state-of-the-art in their development techniques, and compares them with the Hybrid app approach, then highlighting the trends in mobile app development using Hybrid platforms and their advantages. This research includes the development of a mobile Hybrid application, CodeGT, which interacts with an Enterprise Resource Planning (ERP) to access the Transport Documents registered in this ERP and access to the code transmitted by the Portuguese Tax Authority (AT), therefore not requiring the printing of documents and meeting a need of the business market. This application does already have customer industry companies interested in it.},
}

@MastersThesis{Nivanaho2019,
  author      = {Nivanaho, Tommi},
  date        = {2019-05-27},
  institution = {Lappeenranta-Lahti University of Technology LUT},
  title       = {Developing a cross-platform mobile application with React Native},
  url         = {http://lutpub.lut.fi/handle/10024/159507},
  abstract    = {With the splintering of the mobile application market, a new demand has risen for technologies that allow mobile application development for multiple platforms simultaneously. The current market leading solution React Native framework was selected for further study. In the thesis mobile application development and React Native were studied by conducting a literary review into the subjects. A full featured React Native application was also produced with the aim of gaining insight into using the framework in a mobile application development. The literary review and implementation project proved that while React Native still has some lingering problems due to it still being an unfinished product, it is certainly a viable and usable solution for developing mobile applications.},
}

@Electronic{Kotlin2021,
  author  = {Kotlin and JetBrains},
  date    = {2021-02-03},
  editor  = {Kotlin and JetBrains},
  title   = {Kotlin Multiplatform: Share code on platforms},
  url     = {https://kotlinlang.org/docs/reference/mpp-share-on-platforms.html#share-code-on-similar-platforms},
  urldate = {2021-02-11},
}

@Electronic{Kotlin2020,
  author  = {Kotlin and JetBrains},
  date    = {2020-08-31},
  editor  = {Kotlin and JetBrains},
  title   = {Multiplatform programming},
  url     = {https://kotlinlang.org/docs/reference/multiplatform.html},
  urldate = {2021-02-11},
}

@Electronic{KotlinKMM,
  author  = {Kotlin and JetBrains},
  editor  = {Kotlin and JetBrains},
  title   = {Kotlin Multiplatform Mobile},
  url     = {https://kotlinlang.org/lp/mobile/},
  urldate = {2021-02-11},
}

@Electronic{Sells2020,
  author       = {Chris Sells},
  date         = {2020-10-01},
  title        = {Announcing Flutter 1.22},
  url          = {https://medium.com/flutter/announcing-flutter-1-22-44f146009e5f},
  urldate      = {2021-02-11},
  journaltitle = {Medium.com},
}

@Electronic{FlutterWidgets,
  author  = {Flutter},
  editor  = {Flutter},
  title   = {Introduction to widgets},
  url     = {https://flutter.dev/docs/development/ui/widgets-intro},
  urldate = {2021-02-11},
}

@Electronic{OReilly2021,
  author  = {John O'Reilly},
  date    = {2021-02-05},
  editor  = {John O'Reilly},
  title   = {PeopleInSpace},
  url     = {https://github.com/joreilly/PeopleInSpace},
  urldate = {2021-02-11},
}

@Electronic{Kotlin2020HandsOn,
  author  = {Kotlin and JetBrains},
  date    = {2020-11-18},
  editor  = {Kotlin and JetBrains},
  title   = {Kotlin Multiplatform Hands-on: Networking and Data Storage},
  url     = {https://github.com/kotlin-hands-on/kmm-networking-and-data-storage/tree/final},
  urldate = {2021-02-11},
}

@Article{Mateus2019,
  author       = {Bruno G{\'{o}}is Mateus and Matias Martinez},
  date         = {2019-06},
  journaltitle = {Empirical Software Engineering},
  title        = {An empirical study on quality of Android applications written in Kotlin language},
  doi          = {10.1007/s10664-019-09727-4},
  number       = {6},
  pages        = {3356--3393},
  volume       = {24},
  file         = {../bronnen/Mateus2019.pdf},
  publisher    = {Springer Science and Business Media {LLC}},
}

@Comment{jabref-meta: databaseType:biblatex;}
